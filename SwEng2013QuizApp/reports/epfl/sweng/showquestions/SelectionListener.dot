#!/usr/local/bin/dot
#
# Class diagram 
# Generated by UMLGraph version R5_6_6-1-g9240c4 (http://www.umlgraph.org/)
#

digraph G {
	edge [fontname="arial",fontsize=10,labelfontname="arial",labelfontsize=10];
	node [fontname="arial",fontsize=10,shape=plaintext];
	nodesep=0.25;
	ranksep=0.5;
	// epfl.sweng.backend.Question
	c641 [label=<<table title="epfl.sweng.backend.Question" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="../backend/Question.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Question </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Question(questionId : long, questionStmt : String, questionAnswers : List&lt;String&gt;, questionSolutionIndex : int, questionTags : List&lt;String&gt;, questionOwner : String) </td></tr>
<tr><td align="left" balign="left"> + Question(questionStmt : String, questionAnswers : List&lt;String&gt;, questionSolutionIndex : int, questionTags : List&lt;String&gt;) </td></tr>
<tr><td align="left" balign="left"> + createQuestionFromJSON(questionJSON : String) : Question </td></tr>
<tr><td align="left" balign="left"> + toJSON() : JSONObject </td></tr>
<tr><td align="left" balign="left"> + createQuestionFromList(listElm : List&lt;String&gt;) : Question </td></tr>
<tr><td align="left" balign="left"> + createJSONFromQuestion(question : Question) : JSONObject </td></tr>
<tr><td align="left" balign="left"> + getTagsToString() : String </td></tr>
<tr><td align="left" balign="left"> + getOwner() : String </td></tr>
<tr><td align="left" balign="left"> + getSolutionIndex() : int </td></tr>
<tr><td align="left" balign="left"> + getTags() : List&lt;String&gt; </td></tr>
<tr><td align="left" balign="left"> + getId() : long </td></tr>
<tr><td align="left" balign="left"> + getQuestionContent() : String </td></tr>
<tr><td align="left" balign="left"> + getAnswers() : List&lt;String&gt; </td></tr>
<tr><td align="left" balign="left"> + toString() : String </td></tr>
		</table></td></tr>
		</table>>, URL="../backend/Question.html", fontname="arial", fontcolor="black", fontsize=10.0];
	// epfl.sweng.showquestions.SelectionListener
	c648 [label=<<table title="epfl.sweng.showquestions.SelectionListener" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" bgcolor="lemonChiffon" href="./SelectionListener.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> SelectionListener </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + SelectionListener(bNext : Button, question : Question) </td></tr>
<tr><td align="left" balign="left"> + onItemClick(parent : AdapterView&lt;?&gt;, view : View, position : int, id : long) </td></tr>
		</table></td></tr>
		</table>>, URL="./SelectionListener.html", fontname="arial", fontcolor="black", fontsize=10.0];
	//epfl.sweng.showquestions.SelectionListener implements android.widget.AdapterView.OnItemClickListener
	c663:p -> c648:p [dir=back,arrowtail=empty,style=dashed];
	// epfl.sweng.showquestions.SelectionListener DEPEND android.widget.AdapterView<T extends android.widget.Adapter>
	c648:p -> c664:p [taillabel="", label="", headlabel="", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	// epfl.sweng.showquestions.SelectionListener DEPEND android.widget.Button
	c648:p -> c665:p [taillabel="", label="", headlabel="", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	// epfl.sweng.showquestions.SelectionListener DEPEND epfl.sweng.backend.Question
	c648:p -> c641:p [taillabel="", label="", headlabel="", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	// epfl.sweng.showquestions.SelectionListener DEPEND android.view.View
	c648:p -> c666:p [taillabel="", label="", headlabel="", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	// android.view.View
	c666 [label=<<table title="android.view.View" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="http://java.sun.com/j2se/1.4.2/docs/api/android/view/View.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> View </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> # VIEW_LOG_TAG : String </td></tr>
<tr><td align="left" balign="left"> + NO_ID : int </td></tr>
<tr><td align="left" balign="left"> + VISIBLE : int </td></tr>
<tr><td align="left" balign="left"> + INVISIBLE : int </td></tr>
<tr><td align="left" balign="left"> + GONE : int </td></tr>
<tr><td align="left" balign="left"> + DRAWING_CACHE_QUALITY_LOW : int </td></tr>
<tr><td align="left" balign="left"> + DRAWING_CACHE_QUALITY_HIGH : int </td></tr>
<tr><td align="left" balign="left"> + DRAWING_CACHE_QUALITY_AUTO : int </td></tr>
<tr><td align="left" balign="left"> + SCROLLBARS_INSIDE_OVERLAY : int </td></tr>
<tr><td align="left" balign="left"> + SCROLLBARS_INSIDE_INSET : int </td></tr>
<tr><td align="left" balign="left"> + SCROLLBARS_OUTSIDE_OVERLAY : int </td></tr>
<tr><td align="left" balign="left"> + SCROLLBARS_OUTSIDE_INSET : int </td></tr>
<tr><td align="left" balign="left"> + KEEP_SCREEN_ON : int </td></tr>
<tr><td align="left" balign="left"> + SOUND_EFFECTS_ENABLED : int </td></tr>
<tr><td align="left" balign="left"> + HAPTIC_FEEDBACK_ENABLED : int </td></tr>
<tr><td align="left" balign="left"> + FOCUSABLES_ALL : int </td></tr>
<tr><td align="left" balign="left"> + FOCUSABLES_TOUCH_MODE : int </td></tr>
<tr><td align="left" balign="left"> + FOCUS_BACKWARD : int </td></tr>
<tr><td align="left" balign="left"> + FOCUS_FORWARD : int </td></tr>
<tr><td align="left" balign="left"> + FOCUS_LEFT : int </td></tr>
<tr><td align="left" balign="left"> + FOCUS_UP : int </td></tr>
<tr><td align="left" balign="left"> + FOCUS_RIGHT : int </td></tr>
<tr><td align="left" balign="left"> + FOCUS_DOWN : int </td></tr>
<tr><td align="left" balign="left"> + MEASURED_SIZE_MASK : int </td></tr>
<tr><td align="left" balign="left"> + MEASURED_STATE_MASK : int </td></tr>
<tr><td align="left" balign="left"> + MEASURED_HEIGHT_STATE_SHIFT : int </td></tr>
<tr><td align="left" balign="left"> + MEASURED_STATE_TOO_SMALL : int </td></tr>
<tr><td align="left" balign="left"> # EMPTY_STATE_SET : int[] </td></tr>
<tr><td align="left" balign="left"> # ENABLED_STATE_SET : int[] </td></tr>
<tr><td align="left" balign="left"> # FOCUSED_STATE_SET : int[] </td></tr>
<tr><td align="left" balign="left"> # SELECTED_STATE_SET : int[] </td></tr>
<tr><td align="left" balign="left"> # WINDOW_FOCUSED_STATE_SET : int[] </td></tr>
<tr><td align="left" balign="left"> # ENABLED_FOCUSED_STATE_SET : int[] </td></tr>
<tr><td align="left" balign="left"> # ENABLED_SELECTED_STATE_SET : int[] </td></tr>
<tr><td align="left" balign="left"> # ENABLED_WINDOW_FOCUSED_STATE_SET : int[] </td></tr>
<tr><td align="left" balign="left"> # FOCUSED_SELECTED_STATE_SET : int[] </td></tr>
<tr><td align="left" balign="left"> # FOCUSED_WINDOW_FOCUSED_STATE_SET : int[] </td></tr>
<tr><td align="left" balign="left"> # SELECTED_WINDOW_FOCUSED_STATE_SET : int[] </td></tr>
<tr><td align="left" balign="left"> # ENABLED_FOCUSED_SELECTED_STATE_SET : int[] </td></tr>
<tr><td align="left" balign="left"> # ENABLED_FOCUSED_WINDOW_FOCUSED_STATE_SET : int[] </td></tr>
<tr><td align="left" balign="left"> # ENABLED_SELECTED_WINDOW_FOCUSED_STATE_SET : int[] </td></tr>
<tr><td align="left" balign="left"> # FOCUSED_SELECTED_WINDOW_FOCUSED_STATE_SET : int[] </td></tr>
<tr><td align="left" balign="left"> # ENABLED_FOCUSED_SELECTED_WINDOW_FOCUSED_STATE_SET : int[] </td></tr>
<tr><td align="left" balign="left"> # PRESSED_WINDOW_FOCUSED_STATE_SET : int[] </td></tr>
<tr><td align="left" balign="left"> # PRESSED_SELECTED_STATE_SET : int[] </td></tr>
<tr><td align="left" balign="left"> # PRESSED_SELECTED_WINDOW_FOCUSED_STATE_SET : int[] </td></tr>
<tr><td align="left" balign="left"> # PRESSED_FOCUSED_STATE_SET : int[] </td></tr>
<tr><td align="left" balign="left"> # PRESSED_FOCUSED_WINDOW_FOCUSED_STATE_SET : int[] </td></tr>
<tr><td align="left" balign="left"> # PRESSED_FOCUSED_SELECTED_STATE_SET : int[] </td></tr>
<tr><td align="left" balign="left"> # PRESSED_FOCUSED_SELECTED_WINDOW_FOCUSED_STATE_SET : int[] </td></tr>
<tr><td align="left" balign="left"> # PRESSED_ENABLED_STATE_SET : int[] </td></tr>
<tr><td align="left" balign="left"> # PRESSED_ENABLED_WINDOW_FOCUSED_STATE_SET : int[] </td></tr>
<tr><td align="left" balign="left"> # PRESSED_ENABLED_SELECTED_STATE_SET : int[] </td></tr>
<tr><td align="left" balign="left"> # PRESSED_ENABLED_SELECTED_WINDOW_FOCUSED_STATE_SET : int[] </td></tr>
<tr><td align="left" balign="left"> # PRESSED_ENABLED_FOCUSED_STATE_SET : int[] </td></tr>
<tr><td align="left" balign="left"> # PRESSED_ENABLED_FOCUSED_WINDOW_FOCUSED_STATE_SET : int[] </td></tr>
<tr><td align="left" balign="left"> # PRESSED_ENABLED_FOCUSED_SELECTED_STATE_SET : int[] </td></tr>
<tr><td align="left" balign="left"> # PRESSED_ENABLED_FOCUSED_SELECTED_WINDOW_FOCUSED_STATE_SET : int[] </td></tr>
<tr><td align="left" balign="left"> + LAYOUT_DIRECTION_LTR : int </td></tr>
<tr><td align="left" balign="left"> + LAYOUT_DIRECTION_RTL : int </td></tr>
<tr><td align="left" balign="left"> + LAYOUT_DIRECTION_INHERIT : int </td></tr>
<tr><td align="left" balign="left"> + LAYOUT_DIRECTION_LOCALE : int </td></tr>
<tr><td align="left" balign="left"> + TEXT_DIRECTION_INHERIT : int </td></tr>
<tr><td align="left" balign="left"> + TEXT_DIRECTION_FIRST_STRONG : int </td></tr>
<tr><td align="left" balign="left"> + TEXT_DIRECTION_ANY_RTL : int </td></tr>
<tr><td align="left" balign="left"> + TEXT_DIRECTION_LTR : int </td></tr>
<tr><td align="left" balign="left"> + TEXT_DIRECTION_RTL : int </td></tr>
<tr><td align="left" balign="left"> + TEXT_DIRECTION_LOCALE : int </td></tr>
<tr><td align="left" balign="left"> + TEXT_ALIGNMENT_INHERIT : int </td></tr>
<tr><td align="left" balign="left"> + TEXT_ALIGNMENT_GRAVITY : int </td></tr>
<tr><td align="left" balign="left"> + TEXT_ALIGNMENT_TEXT_START : int </td></tr>
<tr><td align="left" balign="left"> + TEXT_ALIGNMENT_TEXT_END : int </td></tr>
<tr><td align="left" balign="left"> + TEXT_ALIGNMENT_CENTER : int </td></tr>
<tr><td align="left" balign="left"> + TEXT_ALIGNMENT_VIEW_START : int </td></tr>
<tr><td align="left" balign="left"> + TEXT_ALIGNMENT_VIEW_END : int </td></tr>
<tr><td align="left" balign="left"> + IMPORTANT_FOR_ACCESSIBILITY_AUTO : int </td></tr>
<tr><td align="left" balign="left"> + IMPORTANT_FOR_ACCESSIBILITY_YES : int </td></tr>
<tr><td align="left" balign="left"> + IMPORTANT_FOR_ACCESSIBILITY_NO : int </td></tr>
<tr><td align="left" balign="left"> + OVER_SCROLL_ALWAYS : int </td></tr>
<tr><td align="left" balign="left"> + OVER_SCROLL_IF_CONTENT_SCROLLS : int </td></tr>
<tr><td align="left" balign="left"> + OVER_SCROLL_NEVER : int </td></tr>
<tr><td align="left" balign="left"> + SYSTEM_UI_FLAG_VISIBLE : int </td></tr>
<tr><td align="left" balign="left"> + SYSTEM_UI_FLAG_LOW_PROFILE : int </td></tr>
<tr><td align="left" balign="left"> + SYSTEM_UI_FLAG_HIDE_NAVIGATION : int </td></tr>
<tr><td align="left" balign="left"> + SYSTEM_UI_FLAG_FULLSCREEN : int </td></tr>
<tr><td align="left" balign="left"> + SYSTEM_UI_FLAG_LAYOUT_STABLE : int </td></tr>
<tr><td align="left" balign="left"> + SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION : int </td></tr>
<tr><td align="left" balign="left"> + SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN : int </td></tr>
<tr><td align="left" balign="left"> + STATUS_BAR_HIDDEN : int </td></tr>
<tr><td align="left" balign="left"> + STATUS_BAR_VISIBLE : int </td></tr>
<tr><td align="left" balign="left"> + SYSTEM_UI_LAYOUT_FLAGS : int </td></tr>
<tr><td align="left" balign="left"> + FIND_VIEWS_WITH_TEXT : int </td></tr>
<tr><td align="left" balign="left"> + FIND_VIEWS_WITH_CONTENT_DESCRIPTION : int </td></tr>
<tr><td align="left" balign="left"> + SCREEN_STATE_OFF : int </td></tr>
<tr><td align="left" balign="left"> + SCREEN_STATE_ON : int </td></tr>
<tr><td align="left" balign="left"> + SCROLLBAR_POSITION_DEFAULT : int </td></tr>
<tr><td align="left" balign="left"> + SCROLLBAR_POSITION_LEFT : int </td></tr>
<tr><td align="left" balign="left"> + SCROLLBAR_POSITION_RIGHT : int </td></tr>
<tr><td align="left" balign="left"> + LAYER_TYPE_NONE : int </td></tr>
<tr><td align="left" balign="left"> + LAYER_TYPE_SOFTWARE : int </td></tr>
<tr><td align="left" balign="left"> + LAYER_TYPE_HARDWARE : int </td></tr>
<tr><td align="left" balign="left"> + ALPHA : Property&lt;View, Float&gt; </td></tr>
<tr><td align="left" balign="left"> + TRANSLATION_X : Property&lt;View, Float&gt; </td></tr>
<tr><td align="left" balign="left"> + TRANSLATION_Y : Property&lt;View, Float&gt; </td></tr>
<tr><td align="left" balign="left"> + X : Property&lt;View, Float&gt; </td></tr>
<tr><td align="left" balign="left"> + Y : Property&lt;View, Float&gt; </td></tr>
<tr><td align="left" balign="left"> + ROTATION : Property&lt;View, Float&gt; </td></tr>
<tr><td align="left" balign="left"> + ROTATION_X : Property&lt;View, Float&gt; </td></tr>
<tr><td align="left" balign="left"> + ROTATION_Y : Property&lt;View, Float&gt; </td></tr>
<tr><td align="left" balign="left"> + SCALE_X : Property&lt;View, Float&gt; </td></tr>
<tr><td align="left" balign="left"> + SCALE_Y : Property&lt;View, Float&gt; </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + View(arg0 : Context) </td></tr>
<tr><td align="left" balign="left"> + View(arg0 : Context, arg1 : AttributeSet) </td></tr>
<tr><td align="left" balign="left"> + View(arg0 : Context, arg1 : AttributeSet, arg2 : int) </td></tr>
<tr><td align="left" balign="left"> + toString() : String </td></tr>
<tr><td align="left" balign="left"> # initializeFadingEdge(arg0 : TypedArray) </td></tr>
<tr><td align="left" balign="left"> + getVerticalFadingEdgeLength() : int </td></tr>
<tr><td align="left" balign="left"> + setFadingEdgeLength(arg0 : int) </td></tr>
<tr><td align="left" balign="left"> + getHorizontalFadingEdgeLength() : int </td></tr>
<tr><td align="left" balign="left"> + getVerticalScrollbarWidth() : int </td></tr>
<tr><td align="left" balign="left"> # getHorizontalScrollbarHeight() : int </td></tr>
<tr><td align="left" balign="left"> # initializeScrollbars(arg0 : TypedArray) </td></tr>
<tr><td align="left" balign="left"> + setVerticalScrollbarPosition(arg0 : int) </td></tr>
<tr><td align="left" balign="left"> + getVerticalScrollbarPosition() : int </td></tr>
<tr><td align="left" balign="left"> + setOnFocusChangeListener(arg0 : View.OnFocusChangeListener) </td></tr>
<tr><td align="left" balign="left"> + addOnLayoutChangeListener(arg0 : View.OnLayoutChangeListener) </td></tr>
<tr><td align="left" balign="left"> + removeOnLayoutChangeListener(arg0 : View.OnLayoutChangeListener) </td></tr>
<tr><td align="left" balign="left"> + addOnAttachStateChangeListener(arg0 : View.OnAttachStateChangeListener) </td></tr>
<tr><td align="left" balign="left"> + removeOnAttachStateChangeListener(arg0 : View.OnAttachStateChangeListener) </td></tr>
<tr><td align="left" balign="left"> + getOnFocusChangeListener() : View.OnFocusChangeListener </td></tr>
<tr><td align="left" balign="left"> + setOnClickListener(arg0 : View.OnClickListener) </td></tr>
<tr><td align="left" balign="left"> + hasOnClickListeners() : boolean </td></tr>
<tr><td align="left" balign="left"> + setOnLongClickListener(arg0 : View.OnLongClickListener) </td></tr>
<tr><td align="left" balign="left"> + setOnCreateContextMenuListener(arg0 : View.OnCreateContextMenuListener) </td></tr>
<tr><td align="left" balign="left"> + performClick() : boolean </td></tr>
<tr><td align="left" balign="left"> + callOnClick() : boolean </td></tr>
<tr><td align="left" balign="left"> + performLongClick() : boolean </td></tr>
<tr><td align="left" balign="left"> + showContextMenu() : boolean </td></tr>
<tr><td align="left" balign="left"> + startActionMode(arg0 : ActionMode.Callback) : ActionMode </td></tr>
<tr><td align="left" balign="left"> + setOnKeyListener(arg0 : View.OnKeyListener) </td></tr>
<tr><td align="left" balign="left"> + setOnTouchListener(arg0 : View.OnTouchListener) </td></tr>
<tr><td align="left" balign="left"> + setOnGenericMotionListener(arg0 : View.OnGenericMotionListener) </td></tr>
<tr><td align="left" balign="left"> + setOnHoverListener(arg0 : View.OnHoverListener) </td></tr>
<tr><td align="left" balign="left"> + setOnDragListener(arg0 : View.OnDragListener) </td></tr>
<tr><td align="left" balign="left"> + requestRectangleOnScreen(arg0 : Rect) : boolean </td></tr>
<tr><td align="left" balign="left"> + requestRectangleOnScreen(arg0 : Rect, arg1 : boolean) : boolean </td></tr>
<tr><td align="left" balign="left"> + clearFocus() </td></tr>
<tr><td align="left" balign="left"> + hasFocus() : boolean </td></tr>
<tr><td align="left" balign="left"> + hasFocusable() : boolean </td></tr>
<tr><td align="left" balign="left"> # onFocusChanged(arg0 : boolean, arg1 : int, arg2 : Rect) </td></tr>
<tr><td align="left" balign="left"> + sendAccessibilityEvent(arg0 : int) </td></tr>
<tr><td align="left" balign="left"> + announceForAccessibility(arg0 : CharSequence) </td></tr>
<tr><td align="left" balign="left"> + sendAccessibilityEventUnchecked(arg0 : AccessibilityEvent) </td></tr>
<tr><td align="left" balign="left"> + dispatchPopulateAccessibilityEvent(arg0 : AccessibilityEvent) : boolean </td></tr>
<tr><td align="left" balign="left"> + onPopulateAccessibilityEvent(arg0 : AccessibilityEvent) </td></tr>
<tr><td align="left" balign="left"> + onInitializeAccessibilityEvent(arg0 : AccessibilityEvent) </td></tr>
<tr><td align="left" balign="left"> + createAccessibilityNodeInfo() : AccessibilityNodeInfo </td></tr>
<tr><td align="left" balign="left"> + onInitializeAccessibilityNodeInfo(arg0 : AccessibilityNodeInfo) </td></tr>
<tr><td align="left" balign="left"> + setAccessibilityDelegate(arg0 : View.AccessibilityDelegate) </td></tr>
<tr><td align="left" balign="left"> + getAccessibilityNodeProvider() : AccessibilityNodeProvider </td></tr>
<tr><td align="left" balign="left"> + getContentDescription() : CharSequence </td></tr>
<tr><td align="left" balign="left"> + setContentDescription(arg0 : CharSequence) </td></tr>
<tr><td align="left" balign="left"> + getLabelFor() : int </td></tr>
<tr><td align="left" balign="left"> + setLabelFor(arg0 : int) </td></tr>
<tr><td align="left" balign="left"> + isFocused() : boolean </td></tr>
<tr><td align="left" balign="left"> + findFocus() : View </td></tr>
<tr><td align="left" balign="left"> + isScrollContainer() : boolean </td></tr>
<tr><td align="left" balign="left"> + setScrollContainer(arg0 : boolean) </td></tr>
<tr><td align="left" balign="left"> + getDrawingCacheQuality() : int </td></tr>
<tr><td align="left" balign="left"> + setDrawingCacheQuality(arg0 : int) </td></tr>
<tr><td align="left" balign="left"> + getKeepScreenOn() : boolean </td></tr>
<tr><td align="left" balign="left"> + setKeepScreenOn(arg0 : boolean) </td></tr>
<tr><td align="left" balign="left"> + getNextFocusLeftId() : int </td></tr>
<tr><td align="left" balign="left"> + setNextFocusLeftId(arg0 : int) </td></tr>
<tr><td align="left" balign="left"> + getNextFocusRightId() : int </td></tr>
<tr><td align="left" balign="left"> + setNextFocusRightId(arg0 : int) </td></tr>
<tr><td align="left" balign="left"> + getNextFocusUpId() : int </td></tr>
<tr><td align="left" balign="left"> + setNextFocusUpId(arg0 : int) </td></tr>
<tr><td align="left" balign="left"> + getNextFocusDownId() : int </td></tr>
<tr><td align="left" balign="left"> + setNextFocusDownId(arg0 : int) </td></tr>
<tr><td align="left" balign="left"> + getNextFocusForwardId() : int </td></tr>
<tr><td align="left" balign="left"> + setNextFocusForwardId(arg0 : int) </td></tr>
<tr><td align="left" balign="left"> + isShown() : boolean </td></tr>
<tr><td align="left" balign="left"> # fitSystemWindows(arg0 : Rect) : boolean </td></tr>
<tr><td align="left" balign="left"> + setFitsSystemWindows(arg0 : boolean) </td></tr>
<tr><td align="left" balign="left"> + getFitsSystemWindows() : boolean </td></tr>
<tr><td align="left" balign="left"> + requestFitSystemWindows() </td></tr>
<tr><td align="left" balign="left"> + getVisibility() : int </td></tr>
<tr><td align="left" balign="left"> + setVisibility(arg0 : int) </td></tr>
<tr><td align="left" balign="left"> + isEnabled() : boolean </td></tr>
<tr><td align="left" balign="left"> + setEnabled(arg0 : boolean) </td></tr>
<tr><td align="left" balign="left"> + setFocusable(arg0 : boolean) </td></tr>
<tr><td align="left" balign="left"> + setFocusableInTouchMode(arg0 : boolean) </td></tr>
<tr><td align="left" balign="left"> + setSoundEffectsEnabled(arg0 : boolean) </td></tr>
<tr><td align="left" balign="left"> + isSoundEffectsEnabled() : boolean </td></tr>
<tr><td align="left" balign="left"> + setHapticFeedbackEnabled(arg0 : boolean) </td></tr>
<tr><td align="left" balign="left"> + isHapticFeedbackEnabled() : boolean </td></tr>
<tr><td align="left" balign="left"> + setLayoutDirection(arg0 : int) </td></tr>
<tr><td align="left" balign="left"> + getLayoutDirection() : int </td></tr>
<tr><td align="left" balign="left"> + hasTransientState() : boolean </td></tr>
<tr><td align="left" balign="left"> + setHasTransientState(arg0 : boolean) </td></tr>
<tr><td align="left" balign="left"> + setWillNotDraw(arg0 : boolean) </td></tr>
<tr><td align="left" balign="left"> + willNotDraw() : boolean </td></tr>
<tr><td align="left" balign="left"> + setWillNotCacheDrawing(arg0 : boolean) </td></tr>
<tr><td align="left" balign="left"> + willNotCacheDrawing() : boolean </td></tr>
<tr><td align="left" balign="left"> + isClickable() : boolean </td></tr>
<tr><td align="left" balign="left"> + setClickable(arg0 : boolean) </td></tr>
<tr><td align="left" balign="left"> + isLongClickable() : boolean </td></tr>
<tr><td align="left" balign="left"> + setLongClickable(arg0 : boolean) </td></tr>
<tr><td align="left" balign="left"> + setPressed(arg0 : boolean) </td></tr>
<tr><td align="left" balign="left"> # dispatchSetPressed(arg0 : boolean) </td></tr>
<tr><td align="left" balign="left"> + isPressed() : boolean </td></tr>
<tr><td align="left" balign="left"> + isSaveEnabled() : boolean </td></tr>
<tr><td align="left" balign="left"> + setSaveEnabled(arg0 : boolean) </td></tr>
<tr><td align="left" balign="left"> + getFilterTouchesWhenObscured() : boolean </td></tr>
<tr><td align="left" balign="left"> + setFilterTouchesWhenObscured(arg0 : boolean) </td></tr>
<tr><td align="left" balign="left"> + isSaveFromParentEnabled() : boolean </td></tr>
<tr><td align="left" balign="left"> + setSaveFromParentEnabled(arg0 : boolean) </td></tr>
<tr><td align="left" balign="left"> + isFocusable() : boolean </td></tr>
<tr><td align="left" balign="left"> + isFocusableInTouchMode() : boolean </td></tr>
<tr><td align="left" balign="left"> + focusSearch(arg0 : int) : View </td></tr>
<tr><td align="left" balign="left"> + dispatchUnhandledMove(arg0 : View, arg1 : int) : boolean </td></tr>
<tr><td align="left" balign="left"> + getFocusables(arg0 : int) : ArrayList&lt;View&gt; </td></tr>
<tr><td align="left" balign="left"> + addFocusables(arg0 : ArrayList&lt;View&gt;, arg1 : int) </td></tr>
<tr><td align="left" balign="left"> + addFocusables(arg0 : ArrayList&lt;View&gt;, arg1 : int, arg2 : int) </td></tr>
<tr><td align="left" balign="left"> + findViewsWithText(arg0 : ArrayList&lt;View&gt;, arg1 : CharSequence, arg2 : int) </td></tr>
<tr><td align="left" balign="left"> + getTouchables() : ArrayList&lt;View&gt; </td></tr>
<tr><td align="left" balign="left"> + addTouchables(arg0 : ArrayList&lt;View&gt;) </td></tr>
<tr><td align="left" balign="left"> + requestFocus() : boolean </td></tr>
<tr><td align="left" balign="left"> + requestFocus(arg0 : int) : boolean </td></tr>
<tr><td align="left" balign="left"> + requestFocus(arg0 : int, arg1 : Rect) : boolean </td></tr>
<tr><td align="left" balign="left"> + requestFocusFromTouch() : boolean </td></tr>
<tr><td align="left" balign="left"> + getImportantForAccessibility() : int </td></tr>
<tr><td align="left" balign="left"> + setImportantForAccessibility(arg0 : int) </td></tr>
<tr><td align="left" balign="left"> + getParentForAccessibility() : ViewParent </td></tr>
<tr><td align="left" balign="left"> + addChildrenForAccessibility(arg0 : ArrayList&lt;View&gt;) </td></tr>
<tr><td align="left" balign="left"> + performAccessibilityAction(arg0 : int, arg1 : Bundle) : boolean </td></tr>
<tr><td align="left" balign="left"> + onStartTemporaryDetach() </td></tr>
<tr><td align="left" balign="left"> + onFinishTemporaryDetach() </td></tr>
<tr><td align="left" balign="left"> + getKeyDispatcherState() : KeyEvent.DispatcherState </td></tr>
<tr><td align="left" balign="left"> + dispatchKeyEventPreIme(arg0 : KeyEvent) : boolean </td></tr>
<tr><td align="left" balign="left"> + dispatchKeyEvent(arg0 : KeyEvent) : boolean </td></tr>
<tr><td align="left" balign="left"> + dispatchKeyShortcutEvent(arg0 : KeyEvent) : boolean </td></tr>
<tr><td align="left" balign="left"> + dispatchTouchEvent(arg0 : MotionEvent) : boolean </td></tr>
<tr><td align="left" balign="left"> + onFilterTouchEventForSecurity(arg0 : MotionEvent) : boolean </td></tr>
<tr><td align="left" balign="left"> + dispatchTrackballEvent(arg0 : MotionEvent) : boolean </td></tr>
<tr><td align="left" balign="left"> + dispatchGenericMotionEvent(arg0 : MotionEvent) : boolean </td></tr>
<tr><td align="left" balign="left"> # dispatchHoverEvent(arg0 : MotionEvent) : boolean </td></tr>
<tr><td align="left" balign="left"> # dispatchGenericPointerEvent(arg0 : MotionEvent) : boolean </td></tr>
<tr><td align="left" balign="left"> # dispatchGenericFocusedEvent(arg0 : MotionEvent) : boolean </td></tr>
<tr><td align="left" balign="left"> + dispatchWindowFocusChanged(arg0 : boolean) </td></tr>
<tr><td align="left" balign="left"> + onWindowFocusChanged(arg0 : boolean) </td></tr>
<tr><td align="left" balign="left"> + hasWindowFocus() : boolean </td></tr>
<tr><td align="left" balign="left"> # dispatchVisibilityChanged(arg0 : View, arg1 : int) </td></tr>
<tr><td align="left" balign="left"> # onVisibilityChanged(arg0 : View, arg1 : int) </td></tr>
<tr><td align="left" balign="left"> + dispatchDisplayHint(arg0 : int) </td></tr>
<tr><td align="left" balign="left"> # onDisplayHint(arg0 : int) </td></tr>
<tr><td align="left" balign="left"> + dispatchWindowVisibilityChanged(arg0 : int) </td></tr>
<tr><td align="left" balign="left"> # onWindowVisibilityChanged(arg0 : int) </td></tr>
<tr><td align="left" balign="left"> + getWindowVisibility() : int </td></tr>
<tr><td align="left" balign="left"> + getWindowVisibleDisplayFrame(arg0 : Rect) </td></tr>
<tr><td align="left" balign="left"> + dispatchConfigurationChanged(arg0 : Configuration) </td></tr>
<tr><td align="left" balign="left"> # onConfigurationChanged(arg0 : Configuration) </td></tr>
<tr><td align="left" balign="left"> + isInTouchMode() : boolean </td></tr>
<tr><td align="left" balign="left"> + getContext() : Context </td></tr>
<tr><td align="left" balign="left"> + onKeyPreIme(arg0 : int, arg1 : KeyEvent) : boolean </td></tr>
<tr><td align="left" balign="left"> + onKeyDown(arg0 : int, arg1 : KeyEvent) : boolean </td></tr>
<tr><td align="left" balign="left"> + onKeyLongPress(arg0 : int, arg1 : KeyEvent) : boolean </td></tr>
<tr><td align="left" balign="left"> + onKeyUp(arg0 : int, arg1 : KeyEvent) : boolean </td></tr>
<tr><td align="left" balign="left"> + onKeyMultiple(arg0 : int, arg1 : int, arg2 : KeyEvent) : boolean </td></tr>
<tr><td align="left" balign="left"> + onKeyShortcut(arg0 : int, arg1 : KeyEvent) : boolean </td></tr>
<tr><td align="left" balign="left"> + onCheckIsTextEditor() : boolean </td></tr>
<tr><td align="left" balign="left"> + onCreateInputConnection(arg0 : EditorInfo) : InputConnection </td></tr>
<tr><td align="left" balign="left"> + checkInputConnectionProxy(arg0 : View) : boolean </td></tr>
<tr><td align="left" balign="left"> + createContextMenu(arg0 : ContextMenu) </td></tr>
<tr><td align="left" balign="left"> # getContextMenuInfo() : ContextMenu.ContextMenuInfo </td></tr>
<tr><td align="left" balign="left"> # onCreateContextMenu(arg0 : ContextMenu) </td></tr>
<tr><td align="left" balign="left"> + onTrackballEvent(arg0 : MotionEvent) : boolean </td></tr>
<tr><td align="left" balign="left"> + onGenericMotionEvent(arg0 : MotionEvent) : boolean </td></tr>
<tr><td align="left" balign="left"> + onHoverEvent(arg0 : MotionEvent) : boolean </td></tr>
<tr><td align="left" balign="left"> + isHovered() : boolean </td></tr>
<tr><td align="left" balign="left"> + setHovered(arg0 : boolean) </td></tr>
<tr><td align="left" balign="left"> + onHoverChanged(arg0 : boolean) </td></tr>
<tr><td align="left" balign="left"> + onTouchEvent(arg0 : MotionEvent) : boolean </td></tr>
<tr><td align="left" balign="left"> + cancelLongPress() </td></tr>
<tr><td align="left" balign="left"> + setTouchDelegate(arg0 : TouchDelegate) </td></tr>
<tr><td align="left" balign="left"> + getTouchDelegate() : TouchDelegate </td></tr>
<tr><td align="left" balign="left"> + bringToFront() </td></tr>
<tr><td align="left" balign="left"> # onScrollChanged(arg0 : int, arg1 : int, arg2 : int, arg3 : int) </td></tr>
<tr><td align="left" balign="left"> # onSizeChanged(arg0 : int, arg1 : int, arg2 : int, arg3 : int) </td></tr>
<tr><td align="left" balign="left"> # dispatchDraw(arg0 : Canvas) </td></tr>
<tr><td align="left" balign="left"> + getParent() : ViewParent </td></tr>
<tr><td align="left" balign="left"> + setScrollX(arg0 : int) </td></tr>
<tr><td align="left" balign="left"> + setScrollY(arg0 : int) </td></tr>
<tr><td align="left" balign="left"> + getScrollX() : int </td></tr>
<tr><td align="left" balign="left"> + getScrollY() : int </td></tr>
<tr><td align="left" balign="left"> + getWidth() : int </td></tr>
<tr><td align="left" balign="left"> + getHeight() : int </td></tr>
<tr><td align="left" balign="left"> + getDrawingRect(arg0 : Rect) </td></tr>
<tr><td align="left" balign="left"> + getMeasuredWidth() : int </td></tr>
<tr><td align="left" balign="left"> + getMeasuredWidthAndState() : int </td></tr>
<tr><td align="left" balign="left"> + getMeasuredHeight() : int </td></tr>
<tr><td align="left" balign="left"> + getMeasuredHeightAndState() : int </td></tr>
<tr><td align="left" balign="left"> + getMeasuredState() : int </td></tr>
<tr><td align="left" balign="left"> + getMatrix() : Matrix </td></tr>
<tr><td align="left" balign="left"> + getCameraDistance() : float </td></tr>
<tr><td align="left" balign="left"> + setCameraDistance(arg0 : float) </td></tr>
<tr><td align="left" balign="left"> + getRotation() : float </td></tr>
<tr><td align="left" balign="left"> + setRotation(arg0 : float) </td></tr>
<tr><td align="left" balign="left"> + getRotationY() : float </td></tr>
<tr><td align="left" balign="left"> + setRotationY(arg0 : float) </td></tr>
<tr><td align="left" balign="left"> + getRotationX() : float </td></tr>
<tr><td align="left" balign="left"> + setRotationX(arg0 : float) </td></tr>
<tr><td align="left" balign="left"> + getScaleX() : float </td></tr>
<tr><td align="left" balign="left"> + setScaleX(arg0 : float) </td></tr>
<tr><td align="left" balign="left"> + getScaleY() : float </td></tr>
<tr><td align="left" balign="left"> + setScaleY(arg0 : float) </td></tr>
<tr><td align="left" balign="left"> + getPivotX() : float </td></tr>
<tr><td align="left" balign="left"> + setPivotX(arg0 : float) </td></tr>
<tr><td align="left" balign="left"> + getPivotY() : float </td></tr>
<tr><td align="left" balign="left"> + setPivotY(arg0 : float) </td></tr>
<tr><td align="left" balign="left"> + getAlpha() : float </td></tr>
<tr><td align="left" balign="left"> + hasOverlappingRendering() : boolean </td></tr>
<tr><td align="left" balign="left"> + setAlpha(arg0 : float) </td></tr>
<tr><td align="left" balign="left"> + getTop() : int </td></tr>
<tr><td align="left" balign="left"> + setTop(arg0 : int) </td></tr>
<tr><td align="left" balign="left"> + getBottom() : int </td></tr>
<tr><td align="left" balign="left"> + isDirty() : boolean </td></tr>
<tr><td align="left" balign="left"> + setBottom(arg0 : int) </td></tr>
<tr><td align="left" balign="left"> + getLeft() : int </td></tr>
<tr><td align="left" balign="left"> + setLeft(arg0 : int) </td></tr>
<tr><td align="left" balign="left"> + getRight() : int </td></tr>
<tr><td align="left" balign="left"> + setRight(arg0 : int) </td></tr>
<tr><td align="left" balign="left"> + getX() : float </td></tr>
<tr><td align="left" balign="left"> + setX(arg0 : float) </td></tr>
<tr><td align="left" balign="left"> + getY() : float </td></tr>
<tr><td align="left" balign="left"> + setY(arg0 : float) </td></tr>
<tr><td align="left" balign="left"> + getTranslationX() : float </td></tr>
<tr><td align="left" balign="left"> + setTranslationX(arg0 : float) </td></tr>
<tr><td align="left" balign="left"> + getTranslationY() : float </td></tr>
<tr><td align="left" balign="left"> + setTranslationY(arg0 : float) </td></tr>
<tr><td align="left" balign="left"> + getHitRect(arg0 : Rect) </td></tr>
<tr><td align="left" balign="left"> + getFocusedRect(arg0 : Rect) </td></tr>
<tr><td align="left" balign="left"> + getGlobalVisibleRect(arg0 : Rect, arg1 : Point) : boolean </td></tr>
<tr><td align="left" balign="left"> + getGlobalVisibleRect(arg0 : Rect) : boolean </td></tr>
<tr><td align="left" balign="left"> + getLocalVisibleRect(arg0 : Rect) : boolean </td></tr>
<tr><td align="left" balign="left"> + offsetTopAndBottom(arg0 : int) </td></tr>
<tr><td align="left" balign="left"> + offsetLeftAndRight(arg0 : int) </td></tr>
<tr><td align="left" balign="left"> + getLayoutParams() : ViewGroup.LayoutParams </td></tr>
<tr><td align="left" balign="left"> + setLayoutParams(arg0 : ViewGroup.LayoutParams) </td></tr>
<tr><td align="left" balign="left"> + scrollTo(arg0 : int, arg1 : int) </td></tr>
<tr><td align="left" balign="left"> + scrollBy(arg0 : int, arg1 : int) </td></tr>
<tr><td align="left" balign="left"> # awakenScrollBars() : boolean </td></tr>
<tr><td align="left" balign="left"> # awakenScrollBars(arg0 : int) : boolean </td></tr>
<tr><td align="left" balign="left"> # awakenScrollBars(arg0 : int, arg1 : boolean) : boolean </td></tr>
<tr><td align="left" balign="left"> + invalidate(arg0 : Rect) </td></tr>
<tr><td align="left" balign="left"> + invalidate(arg0 : int, arg1 : int, arg2 : int, arg3 : int) </td></tr>
<tr><td align="left" balign="left"> + invalidate() </td></tr>
<tr><td align="left" balign="left"> + isOpaque() : boolean </td></tr>
<tr><td align="left" balign="left"> + getHandler() : Handler </td></tr>
<tr><td align="left" balign="left"> + post(arg0 : Runnable) : boolean </td></tr>
<tr><td align="left" balign="left"> + postDelayed(arg0 : Runnable, arg1 : long) : boolean </td></tr>
<tr><td align="left" balign="left"> + postOnAnimation(arg0 : Runnable) </td></tr>
<tr><td align="left" balign="left"> + postOnAnimationDelayed(arg0 : Runnable, arg1 : long) </td></tr>
<tr><td align="left" balign="left"> + removeCallbacks(arg0 : Runnable) : boolean </td></tr>
<tr><td align="left" balign="left"> + postInvalidate() </td></tr>
<tr><td align="left" balign="left"> + postInvalidate(arg0 : int, arg1 : int, arg2 : int, arg3 : int) </td></tr>
<tr><td align="left" balign="left"> + postInvalidateDelayed(arg0 : long) </td></tr>
<tr><td align="left" balign="left"> + postInvalidateDelayed(arg0 : long, arg1 : int, arg2 : int, arg3 : int, arg4 : int) </td></tr>
<tr><td align="left" balign="left"> + postInvalidateOnAnimation() </td></tr>
<tr><td align="left" balign="left"> + postInvalidateOnAnimation(arg0 : int, arg1 : int, arg2 : int, arg3 : int) </td></tr>
<tr><td align="left" balign="left"> + computeScroll() </td></tr>
<tr><td align="left" balign="left"> + isHorizontalFadingEdgeEnabled() : boolean </td></tr>
<tr><td align="left" balign="left"> + setHorizontalFadingEdgeEnabled(arg0 : boolean) </td></tr>
<tr><td align="left" balign="left"> + isVerticalFadingEdgeEnabled() : boolean </td></tr>
<tr><td align="left" balign="left"> + setVerticalFadingEdgeEnabled(arg0 : boolean) </td></tr>
<tr><td align="left" balign="left"> # getTopFadingEdgeStrength() : float </td></tr>
<tr><td align="left" balign="left"> # getBottomFadingEdgeStrength() : float </td></tr>
<tr><td align="left" balign="left"> # getLeftFadingEdgeStrength() : float </td></tr>
<tr><td align="left" balign="left"> # getRightFadingEdgeStrength() : float </td></tr>
<tr><td align="left" balign="left"> + isHorizontalScrollBarEnabled() : boolean </td></tr>
<tr><td align="left" balign="left"> + setHorizontalScrollBarEnabled(arg0 : boolean) </td></tr>
<tr><td align="left" balign="left"> + isVerticalScrollBarEnabled() : boolean </td></tr>
<tr><td align="left" balign="left"> + setVerticalScrollBarEnabled(arg0 : boolean) </td></tr>
<tr><td align="left" balign="left"> + setScrollbarFadingEnabled(arg0 : boolean) </td></tr>
<tr><td align="left" balign="left"> + isScrollbarFadingEnabled() : boolean </td></tr>
<tr><td align="left" balign="left"> + getScrollBarDefaultDelayBeforeFade() : int </td></tr>
<tr><td align="left" balign="left"> + setScrollBarDefaultDelayBeforeFade(arg0 : int) </td></tr>
<tr><td align="left" balign="left"> + getScrollBarFadeDuration() : int </td></tr>
<tr><td align="left" balign="left"> + setScrollBarFadeDuration(arg0 : int) </td></tr>
<tr><td align="left" balign="left"> + getScrollBarSize() : int </td></tr>
<tr><td align="left" balign="left"> + setScrollBarSize(arg0 : int) </td></tr>
<tr><td align="left" balign="left"> + setScrollBarStyle(arg0 : int) </td></tr>
<tr><td align="left" balign="left"> + getScrollBarStyle() : int </td></tr>
<tr><td align="left" balign="left"> # computeHorizontalScrollRange() : int </td></tr>
<tr><td align="left" balign="left"> # computeHorizontalScrollOffset() : int </td></tr>
<tr><td align="left" balign="left"> # computeHorizontalScrollExtent() : int </td></tr>
<tr><td align="left" balign="left"> # computeVerticalScrollRange() : int </td></tr>
<tr><td align="left" balign="left"> # computeVerticalScrollOffset() : int </td></tr>
<tr><td align="left" balign="left"> # computeVerticalScrollExtent() : int </td></tr>
<tr><td align="left" balign="left"> + canScrollHorizontally(arg0 : int) : boolean </td></tr>
<tr><td align="left" balign="left"> + canScrollVertically(arg0 : int) : boolean </td></tr>
<tr><td align="left" balign="left"> # onDrawScrollBars(arg0 : Canvas) </td></tr>
<tr><td align="left" balign="left"> # onDraw(arg0 : Canvas) </td></tr>
<tr><td align="left" balign="left"> # onAttachedToWindow() </td></tr>
<tr><td align="left" balign="left"> + onScreenStateChanged(arg0 : int) </td></tr>
<tr><td align="left" balign="left"> + onRtlPropertiesChanged(arg0 : int) </td></tr>
<tr><td align="left" balign="left"> # onDetachedFromWindow() </td></tr>
<tr><td align="left" balign="left"> # getWindowAttachCount() : int </td></tr>
<tr><td align="left" balign="left"> + getWindowToken() : IBinder </td></tr>
<tr><td align="left" balign="left"> + getWindowId() : WindowId </td></tr>
<tr><td align="left" balign="left"> + getApplicationWindowToken() : IBinder </td></tr>
<tr><td align="left" balign="left"> + getDisplay() : Display </td></tr>
<tr><td align="left" balign="left"> + saveHierarchyState(arg0 : SparseArray&lt;Parcelable&gt;) </td></tr>
<tr><td align="left" balign="left"> # dispatchSaveInstanceState(arg0 : SparseArray&lt;Parcelable&gt;) </td></tr>
<tr><td align="left" balign="left"> # onSaveInstanceState() : Parcelable </td></tr>
<tr><td align="left" balign="left"> + restoreHierarchyState(arg0 : SparseArray&lt;Parcelable&gt;) </td></tr>
<tr><td align="left" balign="left"> # dispatchRestoreInstanceState(arg0 : SparseArray&lt;Parcelable&gt;) </td></tr>
<tr><td align="left" balign="left"> # onRestoreInstanceState(arg0 : Parcelable) </td></tr>
<tr><td align="left" balign="left"> + getDrawingTime() : long </td></tr>
<tr><td align="left" balign="left"> + setDuplicateParentStateEnabled(arg0 : boolean) </td></tr>
<tr><td align="left" balign="left"> + isDuplicateParentStateEnabled() : boolean </td></tr>
<tr><td align="left" balign="left"> + setLayerType(arg0 : int, arg1 : Paint) </td></tr>
<tr><td align="left" balign="left"> + setLayerPaint(arg0 : Paint) </td></tr>
<tr><td align="left" balign="left"> + getLayerType() : int </td></tr>
<tr><td align="left" balign="left"> + buildLayer() </td></tr>
<tr><td align="left" balign="left"> + setDrawingCacheEnabled(arg0 : boolean) </td></tr>
<tr><td align="left" balign="left"> + isDrawingCacheEnabled() : boolean </td></tr>
<tr><td align="left" balign="left"> + getDrawingCache() : Bitmap </td></tr>
<tr><td align="left" balign="left"> + getDrawingCache(arg0 : boolean) : Bitmap </td></tr>
<tr><td align="left" balign="left"> + destroyDrawingCache() </td></tr>
<tr><td align="left" balign="left"> + setDrawingCacheBackgroundColor(arg0 : int) </td></tr>
<tr><td align="left" balign="left"> + getDrawingCacheBackgroundColor() : int </td></tr>
<tr><td align="left" balign="left"> + buildDrawingCache() </td></tr>
<tr><td align="left" balign="left"> + buildDrawingCache(arg0 : boolean) </td></tr>
<tr><td align="left" balign="left"> + isInEditMode() : boolean </td></tr>
<tr><td align="left" balign="left"> # isPaddingOffsetRequired() : boolean </td></tr>
<tr><td align="left" balign="left"> # getLeftPaddingOffset() : int </td></tr>
<tr><td align="left" balign="left"> # getRightPaddingOffset() : int </td></tr>
<tr><td align="left" balign="left"> # getTopPaddingOffset() : int </td></tr>
<tr><td align="left" balign="left"> # getBottomPaddingOffset() : int </td></tr>
<tr><td align="left" balign="left"> + isHardwareAccelerated() : boolean </td></tr>
<tr><td align="left" balign="left"> + setClipBounds(arg0 : Rect) </td></tr>
<tr><td align="left" balign="left"> + getClipBounds() : Rect </td></tr>
<tr><td align="left" balign="left"> + draw(arg0 : Canvas) </td></tr>
<tr><td align="left" balign="left"> + getOverlay() : ViewOverlay </td></tr>
<tr><td align="left" balign="left"> + getSolidColor() : int </td></tr>
<tr><td align="left" balign="left"> + isLayoutRequested() : boolean </td></tr>
<tr><td align="left" balign="left"> + layout(arg0 : int, arg1 : int, arg2 : int, arg3 : int) </td></tr>
<tr><td align="left" balign="left"> # onLayout(arg0 : boolean, arg1 : int, arg2 : int, arg3 : int, arg4 : int) </td></tr>
<tr><td align="left" balign="left"> # onFinishInflate() </td></tr>
<tr><td align="left" balign="left"> + getResources() : Resources </td></tr>
<tr><td align="left" balign="left"> + invalidateDrawable(arg0 : Drawable) </td></tr>
<tr><td align="left" balign="left"> + scheduleDrawable(arg0 : Drawable, arg1 : Runnable, arg2 : long) </td></tr>
<tr><td align="left" balign="left"> + unscheduleDrawable(arg0 : Drawable, arg1 : Runnable) </td></tr>
<tr><td align="left" balign="left"> + unscheduleDrawable(arg0 : Drawable) </td></tr>
<tr><td align="left" balign="left"> # verifyDrawable(arg0 : Drawable) : boolean </td></tr>
<tr><td align="left" balign="left"> # drawableStateChanged() </td></tr>
<tr><td align="left" balign="left"> + refreshDrawableState() </td></tr>
<tr><td align="left" balign="left"> + getDrawableState() : int[] </td></tr>
<tr><td align="left" balign="left"> # onCreateDrawableState(arg0 : int) : int[] </td></tr>
<tr><td align="left" balign="left"> # mergeDrawableStates(arg0 : int[], arg1 : int[]) : int[] </td></tr>
<tr><td align="left" balign="left"> + jumpDrawablesToCurrentState() </td></tr>
<tr><td align="left" balign="left"> + setBackgroundColor(arg0 : int) </td></tr>
<tr><td align="left" balign="left"> + setBackgroundResource(arg0 : int) </td></tr>
<tr><td align="left" balign="left"> + setBackground(arg0 : Drawable) </td></tr>
<tr><td align="left" balign="left"> + setBackgroundDrawable(arg0 : Drawable) </td></tr>
<tr><td align="left" balign="left"> + getBackground() : Drawable </td></tr>
<tr><td align="left" balign="left"> + setPadding(arg0 : int, arg1 : int, arg2 : int, arg3 : int) </td></tr>
<tr><td align="left" balign="left"> + setPaddingRelative(arg0 : int, arg1 : int, arg2 : int, arg3 : int) </td></tr>
<tr><td align="left" balign="left"> + getPaddingTop() : int </td></tr>
<tr><td align="left" balign="left"> + getPaddingBottom() : int </td></tr>
<tr><td align="left" balign="left"> + getPaddingLeft() : int </td></tr>
<tr><td align="left" balign="left"> + getPaddingStart() : int </td></tr>
<tr><td align="left" balign="left"> + getPaddingRight() : int </td></tr>
<tr><td align="left" balign="left"> + getPaddingEnd() : int </td></tr>
<tr><td align="left" balign="left"> + isPaddingRelative() : boolean </td></tr>
<tr><td align="left" balign="left"> + setSelected(arg0 : boolean) </td></tr>
<tr><td align="left" balign="left"> # dispatchSetSelected(arg0 : boolean) </td></tr>
<tr><td align="left" balign="left"> + isSelected() : boolean </td></tr>
<tr><td align="left" balign="left"> + setActivated(arg0 : boolean) </td></tr>
<tr><td align="left" balign="left"> # dispatchSetActivated(arg0 : boolean) </td></tr>
<tr><td align="left" balign="left"> + isActivated() : boolean </td></tr>
<tr><td align="left" balign="left"> + getViewTreeObserver() : ViewTreeObserver </td></tr>
<tr><td align="left" balign="left"> + getRootView() : View </td></tr>
<tr><td align="left" balign="left"> + getLocationOnScreen(arg0 : int[]) </td></tr>
<tr><td align="left" balign="left"> + getLocationInWindow(arg0 : int[]) </td></tr>
<tr><td align="left" balign="left"> + findViewById(arg0 : int) : View </td></tr>
<tr><td align="left" balign="left"> + findViewWithTag(arg0 : Object) : View </td></tr>
<tr><td align="left" balign="left"> + setId(arg0 : int) </td></tr>
<tr><td align="left" balign="left"> + getId() : int </td></tr>
<tr><td align="left" balign="left"> + getTag() : Object </td></tr>
<tr><td align="left" balign="left"> + setTag(arg0 : Object) </td></tr>
<tr><td align="left" balign="left"> + getTag(arg0 : int) : Object </td></tr>
<tr><td align="left" balign="left"> + setTag(arg0 : int, arg1 : Object) </td></tr>
<tr><td align="left" balign="left"> + getBaseline() : int </td></tr>
<tr><td align="left" balign="left"> + isInLayout() : boolean </td></tr>
<tr><td align="left" balign="left"> + requestLayout() </td></tr>
<tr><td align="left" balign="left"> + forceLayout() </td></tr>
<tr><td align="left" balign="left"> + measure(arg0 : int, arg1 : int) </td></tr>
<tr><td align="left" balign="left"> # onMeasure(arg0 : int, arg1 : int) </td></tr>
<tr><td align="left" balign="left"> # setMeasuredDimension(arg0 : int, arg1 : int) </td></tr>
<tr><td align="left" balign="left"> + combineMeasuredStates(arg0 : int, arg1 : int) : int </td></tr>
<tr><td align="left" balign="left"> + resolveSize(arg0 : int, arg1 : int) : int </td></tr>
<tr><td align="left" balign="left"> + resolveSizeAndState(arg0 : int, arg1 : int, arg2 : int) : int </td></tr>
<tr><td align="left" balign="left"> + getDefaultSize(arg0 : int, arg1 : int) : int </td></tr>
<tr><td align="left" balign="left"> # getSuggestedMinimumHeight() : int </td></tr>
<tr><td align="left" balign="left"> # getSuggestedMinimumWidth() : int </td></tr>
<tr><td align="left" balign="left"> + getMinimumHeight() : int </td></tr>
<tr><td align="left" balign="left"> + setMinimumHeight(arg0 : int) </td></tr>
<tr><td align="left" balign="left"> + getMinimumWidth() : int </td></tr>
<tr><td align="left" balign="left"> + setMinimumWidth(arg0 : int) </td></tr>
<tr><td align="left" balign="left"> + getAnimation() : Animation </td></tr>
<tr><td align="left" balign="left"> + startAnimation(arg0 : Animation) </td></tr>
<tr><td align="left" balign="left"> + clearAnimation() </td></tr>
<tr><td align="left" balign="left"> + setAnimation(arg0 : Animation) </td></tr>
<tr><td align="left" balign="left"> # onAnimationStart() </td></tr>
<tr><td align="left" balign="left"> # onAnimationEnd() </td></tr>
<tr><td align="left" balign="left"> # onSetAlpha(arg0 : int) : boolean </td></tr>
<tr><td align="left" balign="left"> + playSoundEffect(arg0 : int) </td></tr>
<tr><td align="left" balign="left"> + performHapticFeedback(arg0 : int) : boolean </td></tr>
<tr><td align="left" balign="left"> + performHapticFeedback(arg0 : int, arg1 : int) : boolean </td></tr>
<tr><td align="left" balign="left"> + setSystemUiVisibility(arg0 : int) </td></tr>
<tr><td align="left" balign="left"> + getSystemUiVisibility() : int </td></tr>
<tr><td align="left" balign="left"> + getWindowSystemUiVisibility() : int </td></tr>
<tr><td align="left" balign="left"> + onWindowSystemUiVisibilityChanged(arg0 : int) </td></tr>
<tr><td align="left" balign="left"> + dispatchWindowSystemUiVisiblityChanged(arg0 : int) </td></tr>
<tr><td align="left" balign="left"> + setOnSystemUiVisibilityChangeListener(arg0 : View.OnSystemUiVisibilityChangeListener) </td></tr>
<tr><td align="left" balign="left"> + dispatchSystemUiVisibilityChanged(arg0 : int) </td></tr>
<tr><td align="left" balign="left"> + startDrag(arg0 : ClipData, arg1 : View.DragShadowBuilder, arg2 : Object, arg3 : int) : boolean </td></tr>
<tr><td align="left" balign="left"> + onDragEvent(arg0 : DragEvent) : boolean </td></tr>
<tr><td align="left" balign="left"> + dispatchDragEvent(arg0 : DragEvent) : boolean </td></tr>
<tr><td align="left" balign="left"> + inflate(arg0 : Context, arg1 : int, arg2 : ViewGroup) : View </td></tr>
<tr><td align="left" balign="left"> # overScrollBy(arg0 : int, arg1 : int, arg2 : int, arg3 : int, arg4 : int, arg5 : int, arg6 : int, arg7 : int, arg8 : boolean) : boolean </td></tr>
<tr><td align="left" balign="left"> # onOverScrolled(arg0 : int, arg1 : int, arg2 : boolean, arg3 : boolean) </td></tr>
<tr><td align="left" balign="left"> + getOverScrollMode() : int </td></tr>
<tr><td align="left" balign="left"> + setOverScrollMode(arg0 : int) </td></tr>
<tr><td align="left" balign="left"> + setTextDirection(arg0 : int) </td></tr>
<tr><td align="left" balign="left"> + getTextDirection() : int </td></tr>
<tr><td align="left" balign="left"> + setTextAlignment(arg0 : int) </td></tr>
<tr><td align="left" balign="left"> + getTextAlignment() : int </td></tr>
<tr><td align="left" balign="left"> + generateViewId() : int </td></tr>
<tr><td align="left" balign="left"> + animate() : ViewPropertyAnimator </td></tr>
		</table></td></tr>
		</table>>, URL="http://java.sun.com/j2se/1.4.2/docs/api/android/view/View.html", fontname="arial", fontcolor="black", fontsize=10.0];
	// android.widget.AdapterView<T extends android.widget.Adapter>
	c664 [label=<<table title="android.widget.AdapterView" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="http://java.sun.com/j2se/1.4.2/docs/api/android/widget/AdapterView.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"><font face="arial italic"> AdapterView&lt;T extends Adapter&gt; </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + ITEM_VIEW_TYPE_IGNORE : int </td></tr>
<tr><td align="left" balign="left"> + ITEM_VIEW_TYPE_HEADER_OR_FOOTER : int </td></tr>
<tr><td align="left" balign="left"> + INVALID_POSITION : int </td></tr>
<tr><td align="left" balign="left"> + INVALID_ROW_ID : long </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + AdapterView(arg0 : Context) </td></tr>
<tr><td align="left" balign="left"> + AdapterView(arg0 : Context, arg1 : AttributeSet) </td></tr>
<tr><td align="left" balign="left"> + AdapterView(arg0 : Context, arg1 : AttributeSet, arg2 : int) </td></tr>
<tr><td align="left" balign="left"> + setOnItemClickListener(arg0 : AdapterView.OnItemClickListener) </td></tr>
<tr><td align="left" balign="left"> + getOnItemClickListener() : AdapterView.OnItemClickListener </td></tr>
<tr><td align="left" balign="left"> + performItemClick(arg0 : View, arg1 : int, arg2 : long) : boolean </td></tr>
<tr><td align="left" balign="left"> + setOnItemLongClickListener(arg0 : AdapterView.OnItemLongClickListener) </td></tr>
<tr><td align="left" balign="left"> + getOnItemLongClickListener() : AdapterView.OnItemLongClickListener </td></tr>
<tr><td align="left" balign="left"> + setOnItemSelectedListener(arg0 : AdapterView.OnItemSelectedListener) </td></tr>
<tr><td align="left" balign="left"> + getOnItemSelectedListener() : AdapterView.OnItemSelectedListener </td></tr>
<tr><td align="left" balign="left"><font face="arial italic" point-size="10.0"> + getAdapter() : T </font></td></tr>
<tr><td align="left" balign="left"><font face="arial italic" point-size="10.0"> + setAdapter(arg0 : T) </font></td></tr>
<tr><td align="left" balign="left"> + addView(arg0 : View) </td></tr>
<tr><td align="left" balign="left"> + addView(arg0 : View, arg1 : int) </td></tr>
<tr><td align="left" balign="left"> + addView(arg0 : View, arg1 : ViewGroup.LayoutParams) </td></tr>
<tr><td align="left" balign="left"> + addView(arg0 : View, arg1 : int, arg2 : ViewGroup.LayoutParams) </td></tr>
<tr><td align="left" balign="left"> + removeView(arg0 : View) </td></tr>
<tr><td align="left" balign="left"> + removeViewAt(arg0 : int) </td></tr>
<tr><td align="left" balign="left"> + removeAllViews() </td></tr>
<tr><td align="left" balign="left"> # onLayout(arg0 : boolean, arg1 : int, arg2 : int, arg3 : int, arg4 : int) </td></tr>
<tr><td align="left" balign="left"> + getSelectedItemPosition() : int </td></tr>
<tr><td align="left" balign="left"> + getSelectedItemId() : long </td></tr>
<tr><td align="left" balign="left"><font face="arial italic" point-size="10.0"> + getSelectedView() : View </font></td></tr>
<tr><td align="left" balign="left"> + getSelectedItem() : Object </td></tr>
<tr><td align="left" balign="left"> + getCount() : int </td></tr>
<tr><td align="left" balign="left"> + getPositionForView(arg0 : View) : int </td></tr>
<tr><td align="left" balign="left"> + getFirstVisiblePosition() : int </td></tr>
<tr><td align="left" balign="left"> + getLastVisiblePosition() : int </td></tr>
<tr><td align="left" balign="left"><font face="arial italic" point-size="10.0"> + setSelection(arg0 : int) </font></td></tr>
<tr><td align="left" balign="left"> + setEmptyView(arg0 : View) </td></tr>
<tr><td align="left" balign="left"> + getEmptyView() : View </td></tr>
<tr><td align="left" balign="left"> + setFocusable(arg0 : boolean) </td></tr>
<tr><td align="left" balign="left"> + setFocusableInTouchMode(arg0 : boolean) </td></tr>
<tr><td align="left" balign="left"> + getItemAtPosition(arg0 : int) : Object </td></tr>
<tr><td align="left" balign="left"> + getItemIdAtPosition(arg0 : int) : long </td></tr>
<tr><td align="left" balign="left"> + setOnClickListener(arg0 : View.OnClickListener) </td></tr>
<tr><td align="left" balign="left"> # dispatchSaveInstanceState(arg0 : SparseArray&lt;Parcelable&gt;) </td></tr>
<tr><td align="left" balign="left"> # dispatchRestoreInstanceState(arg0 : SparseArray&lt;Parcelable&gt;) </td></tr>
<tr><td align="left" balign="left"> # onDetachedFromWindow() </td></tr>
<tr><td align="left" balign="left"> + dispatchPopulateAccessibilityEvent(arg0 : AccessibilityEvent) : boolean </td></tr>
<tr><td align="left" balign="left"> + onRequestSendAccessibilityEvent(arg0 : View, arg1 : AccessibilityEvent) : boolean </td></tr>
<tr><td align="left" balign="left"> + onInitializeAccessibilityNodeInfo(arg0 : AccessibilityNodeInfo) </td></tr>
<tr><td align="left" balign="left"> + onInitializeAccessibilityEvent(arg0 : AccessibilityEvent) </td></tr>
<tr><td align="left" balign="left"> # canAnimate() : boolean </td></tr>
		</table></td></tr>
		</table>>, URL="http://java.sun.com/j2se/1.4.2/docs/api/android/widget/AdapterView.html", fontname="arial", fontcolor="black", fontsize=10.0];
	// android.widget.Button
	c665 [label=<<table title="android.widget.Button" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="http://java.sun.com/j2se/1.4.2/docs/api/android/widget/Button.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Button </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Button(arg0 : Context) </td></tr>
<tr><td align="left" balign="left"> + Button(arg0 : Context, arg1 : AttributeSet) </td></tr>
<tr><td align="left" balign="left"> + Button(arg0 : Context, arg1 : AttributeSet, arg2 : int) </td></tr>
<tr><td align="left" balign="left"> + onInitializeAccessibilityEvent(arg0 : AccessibilityEvent) </td></tr>
<tr><td align="left" balign="left"> + onInitializeAccessibilityNodeInfo(arg0 : AccessibilityNodeInfo) </td></tr>
		</table></td></tr>
		</table>>, URL="http://java.sun.com/j2se/1.4.2/docs/api/android/widget/Button.html", fontname="arial", fontcolor="black", fontsize=10.0];
	// android.widget.AdapterView.OnItemClickListener
	c663 [label=<<table title="android.widget.AdapterView.OnItemClickListener" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="http://java.sun.com/j2se/1.4.2/docs/api/android/widget/AdapterView/OnItemClickListener.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> &#171;interface&#187; </td></tr>
<tr><td align="center" balign="center"> OnItemClickListener </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + onItemClick(arg0 : AdapterView&lt;?&gt;, arg1 : View, arg2 : int, arg3 : long) </td></tr>
		</table></td></tr>
		</table>>, URL="http://java.sun.com/j2se/1.4.2/docs/api/android/widget/AdapterView/OnItemClickListener.html", fontname="arial", fontcolor="black", fontsize=10.0];
}

